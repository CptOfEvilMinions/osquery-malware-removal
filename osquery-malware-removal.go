package main

import (
	"context"
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"os"
	"strconv"
	"syscall"

	"github.com/kolide/osquery-go"
	"github.com/kolide/osquery-go/plugin/table"
)

func main() {
	if len(os.Args) != 2 {
		log.Fatalf(`Usage: %s SOCKET_PATH`, os.Args[0])
	}

	server, err := osquery.NewExtensionManagerServer("malware_removal", os.Args[1])
	if err != nil {
		log.Fatalf("Error creating extension: %s\n", err)
	}

	// Create and register a new table plugin with the server.
	// table.NewPlugin requires the table plugin name,
	// a slice of Columns and a Generate function.
	server.RegisterPlugin(table.NewPlugin("malware_removal", MalwareRemovalColumns(), MalwareRemovalGenerate))
	if err := server.Run(); err != nil {
		log.Fatalln(err)
	}
}

// MalwareRemovalColumns returns the columns that our table will return.
func MalwareRemovalColumns() []table.ColumnDefinition {
	return []table.ColumnDefinition{
		table.TextColumn("file_path"),
		table.TextColumn("dir_path"),
		table.TextColumn("file_hash"),
		table.TextColumn("status"),
		table.TextColumn("statusBool"),
	}
}

// MalwareRemovalGenerate will be called whenever the table is queried. It should return
// a full table scan.
func MalwareRemovalGenerate(ctx context.Context, queryContext table.QueryContext) ([]map[string]string, error) {
	var path string
	var status string
	var statusBool bool
	fmt.Println(queryContext.Constraints)
	// If filepath is specified
	if len(queryContext.Constraints["dir_path"].Constraints) > 0 && len(queryContext.Constraints["file_hash"].Constraints) > 0 {
		path = queryContext.Constraints["dir_path"].Constraints[0].Expression
		fileHash := queryContext.Constraints["file_hash"].Constraints[0].Expression
		statusBool, status = deleteFileHash(fileHash, path)
	} else if len(queryContext.Constraints["file_path"].Constraints) > 0 {
		path = queryContext.Constraints["file_path"].Constraints[0].Expression
		statusBool, status = deleteFile(path)
	} else if len(queryContext.Constraints["dir_path"].Constraints) > 0 {
		path = queryContext.Constraints["dir_path"].Constraints[0].Expression
		statusBool, status = deleteDirectory(path)
	} else {
		path = ""
		statusBool = false
		status = "Please specify file_path por dir_path"
	}

	return []map[string]string{
		{
			"file_path":  path,
			"status":     status,
			"statusBool": strconv.FormatBool(statusBool),
		},
	}, nil
}

// deleteFile
func deleteFile(filePath string) (bool, string) {
	// Detect if file exists
	_, err := os.Stat(filePath)
	if os.IsNotExist(err) {
		fmt.Println("File does not exist")
		return false, "File does not exist"
	}

	// Delete file
	err = os.Remove(filePath)
	if err == nil {
		fmt.Println("File sucessfully deleted")
		return true, "Sucess"
	}
	fmt.Println("File was NOT deleted")
	return false, err.Error()

}

// deleteDirectory
func deleteDirectory(directoryPath string) (bool, string) {
	// Detect if directory exists
	_, err := os.Stat(directoryPath)
	if os.IsNotExist(err) {
		fmt.Println("File does not exist")
		return false, "File does not exist"
	}

	// Delete file
	err = os.RemoveAll(directoryPath)
	if err == nil {
		fmt.Println("File sucessfully deleted")
		return true, "Sucess"
	}
	fmt.Println("File was NOT deleted")
	return false, err.Error()

}

// killProcess
func killProcess(pid int) (bool, string) {
	err := syscall.Kill(pid, 9)
	if err == nil {
		fmt.Println("success")
		return true, "success"
	}
	return false, err.Error()
}

func deleteFileHash(fileHash string, directoryPath string) (bool, string) {
	// Get all files in directory
	files, err := ioutil.ReadDir(directoryPath)
	if err != nil {
		return false, err.Error()
	}

	// Iterate through all files in directory
	for _, f := range files {
		tempFilePath := directoryPath + "/" + f.Name()
		fmt.Println(tempFilePath)
		tempFileHashBool, tempFileHash := calculateSHA256File(tempFilePath)
		_ = tempFileHashBool
		fmt.Println(tempFileHash)

		// // Attempt to delete file
		// if tempFileHash == fileHash {
		// 	statusBool, status := deleteFile(f.Name())
		// 	if statusBool == false {
		// 		return false, status
		// 	} else {
		// 		return true, "sucess"
		// 	}
		// }
	}

	return false, err.Error()
}

// calculateSHA256File  calculate the file hash
func calculateSHA256File(filepath string) (bool, string) {
	// OPen file
	f, err := os.Open(filepath)
	if err != nil {
		return false, err.Error()
	}
	defer f.Close()

	h := sha256.New()
	if _, err := io.Copy(h, f); err != nil {
		return false, err.Error()
	}

	return true, hex.EncodeToString(h.Sum(nil))
}
